-- Create post_like table for tracking likes on posts
CREATE TABLE IF NOT EXISTS post_like (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  user_id UUID NOT NULL REFERENCES auth.users (id) ON DELETE CASCADE,
  post_id BIGINT NOT NULL REFERENCES post (id) ON DELETE CASCADE,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT timezone('utc'::text, now()) NOT NULL,
  
  -- Ensure a user can only like a post once
  UNIQUE (user_id, post_id)
);

-- Create comment table for storing post comments
CREATE TABLE IF NOT EXISTS comment (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  content TEXT NOT NULL,
  user_id UUID NOT NULL REFERENCES auth.users (id) ON DELETE CASCADE,
  post_id BIGINT NOT NULL REFERENCES post (id) ON DELETE CASCADE,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT timezone('utc'::text, now()) NOT NULL,
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT timezone('utc'::text, now())
);

-- Create indexes for performance
CREATE INDEX IF NOT EXISTS idx_post_like_post_id ON post_like (post_id);
CREATE INDEX IF NOT EXISTS idx_post_like_user_id ON post_like (user_id);
CREATE INDEX IF NOT EXISTS idx_comment_post_id ON comment (post_id);
CREATE INDEX IF NOT EXISTS idx_comment_user_id ON comment (user_id);

-- Set up Row Level Security (RLS) policies

-- Post Likes Policies
ALTER TABLE post_like ENABLE ROW LEVEL SECURITY;

-- Anyone can view likes
CREATE POLICY "Anyone can view post likes" ON post_like
  FOR SELECT USING (true);

-- Only authenticated users can like posts
CREATE POLICY "Authenticated users can create likes" ON post_like
  FOR INSERT WITH CHECK (auth.uid() = user_id);

-- Users can only delete their own likes
CREATE POLICY "Users can delete own likes" ON post_like
  FOR DELETE USING (auth.uid() = user_id);

-- Comments Policies
ALTER TABLE comment ENABLE ROW LEVEL SECURITY;

-- Anyone can view comments
CREATE POLICY "Anyone can view comments" ON comment
  FOR SELECT USING (true);

-- Only authenticated users can create comments
CREATE POLICY "Authenticated users can create comments" ON comment
  FOR INSERT WITH CHECK (auth.uid() = user_id);

-- Users can only update their own comments
CREATE POLICY "Users can update own comments" ON comment
  FOR UPDATE USING (auth.uid() = user_id);

-- Users can only delete their own comments
CREATE POLICY "Users can delete own comments" ON comment
  FOR DELETE USING (auth.uid() = user_id); 